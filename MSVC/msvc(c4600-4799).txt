											MSVC Compiler warnings (as of 12/18/20 c++17 https://docs.microsoft.com/en-us/cpp/error-messages/compiler-warnings/compiler-warnings-c4600-through-c4799?view=msvc-160)


	C4600	#pragma 'macro name': expected a valid non-empty string
	C4602	#pragma pop_macro: 'macro name' no previous #pragma push_macro for this identifier
	C4603	'identifier': macro is not defined or definition is different after precompiled header use
	C4604	'type': passing argument by value across native and managed boundary requires valid copy constructor. Otherwise the runtime behavior is undefined
	C4605	'/Dmacro' specified on current command line, but was not specified when precompiled header was built
	C4606	#pragma warning: 'warning number' ignored; Code Analysis warnings are not associated with warning levels
	C4608	'union_member' has already been initialized by another union member in the initializer list, 'union_member'
	C4609	'type1' derives from default interface 'interface' on type 'type2'. Use a different default interface for 'type1', or break the base/derived relationship.
	C4610	object 'class' can never be instantiated - user defined constructor required
	C4611	interaction between 'function' and C++ object destruction is non-portable
	C4612	error in include filename
	C4613	'symbol': class of segment cannot be changed
	C4615	#pragma warning: unknown user warning type
	C4616	#pragma warning: warning number 'number' not a valid compiler warning
	C4618	pragma parameters included an empty string; pragma ignored
	C4619	#pragma warning: there is no warning number 'number'
	C4620	no postfix form of 'operator ++' found for type 'type', using prefix form
	C4621	no postfix form of 'operator --' found for type 'type', using prefix form
	C4622	overwriting debug information formed during creation of the precompiled header in object file: 'file'
	C4623	'derived class': default constructor was implicitly defined as deleted because a base class default constructor is inaccessible or deleted
	C4624	'derived class': destructor was implicitly defined as deleted because a base class destructor is inaccessible or deleted
	C4625	'derived class': copy constructor was implicitly defined as deleted because a base class copy constructor is inaccessible or deleted
	C4626	'derived class': assignment operator was implicitly defined as deleted because a base class assignment operator is inaccessible or deleted
	C4627	'<identifier>': skipped when looking for precompiled header use
	C4628	digraphs not supported with -Ze. Character sequence 'digraph' not interpreted as alternate token for '%s'
	C4629	digraph used, character sequence 'digraph' interpreted as token 'char' (insert a space between the two characters if this is not what you intended)
	C4630	'symbol': 'extern' storage-class specifier illegal on member definition
	C4631	MSXML or XPath unavailable, XML document comments will not be processed. reason
	C4632	XML document comment: file - access denied: reason
	C4633	XML document comment target: error: reason
	C4634	XML document comment target: cannot be applied: reason
	C4635	XML document comment target: badly-formed XML: reason
	C4636	XML document comment applied to construct: tag requires non-empty 'attribute' attribute.
	C4637	XML document comment target: <include> tag discarded. Reason
	C4638	XML document comment target: reference to unknown symbol 'symbol'.
	C4639	MSXML error, XML document comments will not be processed. Reason
	C4640	'instance': construction of local static object is not thread-safe
	C4641	XML document comment has an ambiguous cross reference:
	C4645	function declared with __declspec(noreturn) has a return statement
	C4646	function declared with __declspec(noreturn) has non-void return type
	C4647	behavior change: __is_pod(type) has different value in previous versions
	C4648	standard attribute 'carries_dependency' is ignored
	C4649	attributes are ignored in this context
	C4650	debugging information not in precompiled header; only global symbols from the header will be available
	C4651	'definition' specified for precompiled header but not for current compile
	C4652	compiler option 'option' inconsistent with precompiled header; current command-line option will override that defined in the precompiled header
	C4653	compiler option 'option' inconsistent with precompiled header; current command-line option ignored
	C4654	Code placed before include of precompiled header line will be ignored. Add code to precompiled header.
	C4655	'symbol': variable type is new since the latest build, or is defined differently elsewhere
	C4656	'symbol': data type is new or has changed since the latest build, or is defined differently elsewhere
	C4657	expression involves a data type that is new since the latest build
	C4658	'function': function prototype is new since the latest build, or is declared differently elsewhere
	C4659	#pragma 'pragma': use of reserved segment 'segment' has undefined behavior, use #pragma comment(linker, ...)
	C4661	'identifier': no suitable definition provided for explicit template instantiation request
	C4662	explicit instantiation; template-class 'identifier1' has no definition from which to specialize 'identifier2'
	C4667	'function': no function template defined that matches forced instantiation
	C4668	'symbol' is not defined as a preprocessor macro, replacing with '0' for 'directive'
	C4669	'cast': unsafe conversion: 'class' is a managed type object
	C4670	'identifier': this base class is inaccessible
	C4671	'identifier': the copy constructor is inaccessible
	C4672	'identifier1': ambiguous. First seen as 'identifier2'
	C4673	throwing 'identifier' the following types will not be considered at the catch site
	C4674	'method' should be declared 'static' and have exactly one parameter
	C4676	'%s': the destructor is inaccessible
	C4677	'function': signature of non-private member contains assembly private type 'private_type'
	C4678	base class 'base_type' is less accessible than 'derived_type'
	C4679	'member': could not import member
	C4680	'class': coclass does not specify a default interface
	C4681	'class': coclass does not specify a default interface that is an event source
	C4682	'parameter': no directional parameter attribute specified, defaulting to [in]
	C4683	'function': event source has an 'out'-parameter; exercise caution when hooking multiple event handlers
	C4684	'attribute': WARNING!! attribute may cause invalid code generation: use with caution
	C4685	expecting '> >' found '>>' when parsing template parameters
	C4686	'user-defined type': possible change in behavior, change in UDT return calling convention
	C4687	'class': a sealed abstract class cannot implement an interface 'interface'
	C4688	'constraint': constraint list contains assembly private type 'type'
	C4689	'%c': unsupported character in #pragma detect_mismatch; #pragma ignored
	C4690	[ emitidl( pop ) ]: more pops than pushes
	C4691	'type': type referenced was expected in unreferenced assembly 'file', type defined in current translation unit used instead
	C4692	'function': signature of non-private member contains assembly private native type 'native_type'
	C4693	'class': a sealed abstract class cannot have any instance members 'instance member'
	C4694	'class': a sealed abstract class cannot have a base-class 'base_class'
	C4695	#pragma execution_character_set: 'character set' is not a supported argument: currently only 'UTF-8' is supported
	C4696	/ZBvalue1 option out of range; assuming 'value2'
	C4700	uninitialized local variable 'name' used
	C4701	potentially uninitialized local variable 'name' used
	C4702	unreachable code
	C4703	potentially uninitialized local pointer variable '%s' used
	C4706	assignment within conditional expression
	C4709	comma operator within array index expression
	C4710	'function': function not inlined
	C4711	function 'function' selected for automatic inline expansion
	C4714	function 'function' marked as __forceinline not inlined
	C4715	'function': not all control paths return a value
	C4716	'function': must return a value
	C4717	'function': recursive on all control paths, function will cause runtime stack overflow
	C4718	'function call': recursive call has no side effects, deleting
	C4719	Double constant found when Qfast specified - use 'f' as a suffix to indicate single precision
	C4720	in-line assembler reports: 'message'
	C4721	'function': not available as an intrinsic
	C4722	'function': destructor never returns, potential memory leak
	C4723	potential divide by 0
	C4724	potential mod by 0
	C4725	instruction may be inaccurate on some Pentiums
	C4727	PCH named pch_file with same timestamp found in obj_file_1 and obj_file_2. Using first PCH.
	C4728	/Yl- option ignored because PCH reference is required
	C4729	function too big for flow graph based warnings
	C4730	'main': mixing _m64 and floating point expressions may result in incorrect code
	C4731	'pointer': frame pointer register 'register' modified by inline assembly code
	C4732	intrinsic '%s' is not supported in this architecture
	C4733	Inline asm assigning to 'FS:0': handler not registered as safe handler
	C4738	storing 32-bit float result in memory, possible loss of performance
	C4739	reference to variable 'var' exceeds its storage space
	C4740	flow in or out of inline asm code suppresses global optimization
	C4742	'var' has different alignment in 'file1' and 'file2': number and number
	C4743	'type' has different size in 'file1' and 'file2': number and number bytes
	C4744	'var' has different type in 'file1' and 'file2': 'type1' and 'type2'
	C4746	volatile access of 'expression' is subject to /volatile:<iso|ms> setting; consider using __iso_volatile_load/store intrinsic functions
	C4747	Calling managed 'entrypoint': Managed code may not be run under loader lock, including the DLL entrypoint and calls reached from the DLL entrypoint
	C4749	conditionally supported: offsetof applied to non-standard-layout type 'type'
	C4750	'identifier': function with _alloca() inlined into a loop
	C4751	/arch:AVX does not apply to Intel(R) Streaming SIMD Extensions that are within inline ASM
	C4752	found Intel(R) Advanced Vector Extensions; consider using /arch:AVX
	C4754	Conversion rules for arithmetic operations in the comparison at %s(%d) mean that one branch cannot be executed. Cast '%s' to '%s' (or similar type of %d bytes).
	C4755	Conversion rules for arithmetic operations in the comparison at %s(%d) mean that one branch cannot be executed in an inlined function. Cast '%s' to '%s' (or similar type of %d bytes).
	C4756	overflow in constant arithmetic
	C4757	subscript is a large unsigned value, did you intend a negative constant?
	C4764	Can not align catch objects to greater than 16 bytes
	C4767	section name '%s' is longer than 8 characters and will be truncated by the linker
	C4768	__declspec attributes before linkage specification are ignored
	C4770	partially validated enum 'name' used as index
	C4771	Bounds must be created using a simple pointer; MPX intrinsic function ignored
	C4772	#import referenced a type from a missing type library; 'missing_type' used as a placeholder
	C4774	'string' : format string expected in argument number is not a string literal
	C4775	nonstandard extension used in format string 'string' of function 'function'
	C4776	'%character' is not allowed in the format string of function 'function'
	C4777	'function' : format string 'string' requires an argument of type 'type1', but variadic argument number has type 'type2'
	C4778	'function' : unterminated format string 'string'
	C4788	'identifier': identifier was truncated to 'number' characters
	C4789	buffer 'identifier' of size N bytes will be overrun; M bytes will be written starting at offset L
	C4792	function '%s' declared using sysimport and referenced from native code; import library required to link
	C4793	'function': function compiled as native:\n\t'reason'
	C4794	segment of thread local storage variable '%s' changed from '%s' to '%s'
	C4799	function 'function' has no EMMS instruction

	

	C4600
	C4602
	C4603
	C4604
	C4605
	C4606
	C4608
	C4609
	C4610
	C4611
	C4612
	C4613
	C4615
	C4616
	C4618
	C4619
	C4620
	C4621
	C4622
	C4623
	C4624
	C4625
	C4626
	C4627
	C4628
	C4629
	C4630
	C4631
	C4632
	C4633
	C4634
	C4635
	C4636
	C4637
	C4638
	C4639
	C4640
	C4641
	C4645
	C4646
	C4647
	C4648
	C4649
	C4650
	C4651
	C4652
	C4653
	C4654
	C4655
	C4656
	C4657
	C4658
	C4659
	C4661
	C4662
	C4667
	C4668
	C4669
	C4670
	C4671
	C4672
	C4673
	C4674
	C4676
	C4677
	C4678
	C4679
	C4680
	C4681
	C4682
	C4683
	C4684
	C4685
	C4686
	C4687
	C4688
	C4689
	C4690
	C4691
	C4692
	C4693
	C4694
	C4695
	C4696
	C4700
	C4701
	C4702
	C4703
	C4706
	C4709
	C4710
	C4711
	C4714
	C4715
	C4716
	C4717
	C4718
	C4719
	C4720
	C4721
	C4722
	C4723
	C4724
	C4725
	C4727
	C4728
	C4729
	C4730
	C4731
	C4732
	C4733
	C4738
	C4739
	C4740
	C4742
	C4743
	C4744
	C4746
	C4747
	C4749
	C4750
	C4751
	C4752
	C4754
	C4755
	C4756
	C4757
	C4764
	C4767
	C4768
	C4770
	C4771
	C4772
	C4774
	C4775
	C4776
	C4777
	C4778
	C4788
	C4789
	C4792
	C4793
	C4794
	C4799



	4600
	4602
	4603
	4604
	4605
	4606
	4608
	4609
	4610
	4611
	4612
	4613
	4615
	4616
	4618
	4619
	4620
	4621
	4622
	4623
	4624
	4625
	4626
	4627
	4628
	4629
	4630
	4631
	4632
	4633
	4634
	4635
	4636
	4637
	4638
	4639
	4640
	4641
	4645
	4646
	4647
	4648
	4649
	4650
	4651
	4652
	4653
	4654
	4655
	4656
	4657
	4658
	4659
	4661
	4662
	4667
	4668
	4669
	4670
	4671
	4672
	4673
	4674
	4676
	4677
	4678
	4679
	4680
	4681
	4682
	4683
	4684
	4685
	4686
	4687
	4688
	4689
	4690
	4691
	4692
	4693
	4694
	4695
	4696
	4700
	4701
	4702
	4703
	4706
	4709
	4710
	4711
	4714
	4715
	4716
	4717
	4718
	4719
	4720
	4721
	4722
	4723
	4724
	4725
	4727
	4728
	4729
	4730
	4731
	4732
	4733
	4738
	4739
	4740
	4742
	4743
	4744
	4746
	4747
	4749
	4750
	4751
	4752
	4754
	4755
	4756
	4757
	4764
	4767
	4768
	4770
	4771
	4772
	4774
	4775
	4776
	4777
	4778
	4788
	4789
	4792
	4793
	4794
	4799