											MSVC Compiler warnings (as of 12/18/20 c++17 https://docs.microsoft.com/en-us/cpp/error-messages/compiler-warnings/compiler-warnings-c4200-through-c4399?view=msvc-160)


	C4200	nonstandard extension used: zero-sized array in struct/union
	C4201	nonstandard extension used: nameless struct/union
	C4202	nonstandard extension used: '...': prototype parameter in name list illegal
	C4203	nonstandard extension used: union with static member variable
	C4204	nonstandard extension used: non-constant aggregate initializer
	C4205	nonstandard extension used: static function declaration in function scope
	C4206	nonstandard extension used: translation unit is empty
	C4207	nonstandard extension used: extended initializer form
	C4208	nonstandard extension used: delete [exp] - exp evaluated but ignored
	C4210	nonstandard extension used: function given file scope
	C4211	nonstandard extension used: redefined extern to static
	C4212	nonstandard extension used: function declaration used ellipsis
	C4213	nonstandard extension used: cast on l-value
	C4214	nonstandard extension used: bit field types other than int
	C4215	nonstandard extension used: long float
	C4216	nonstandard extension used: float long
	C4218	nonstandard extension used: must specify at least a storage class or a type
	C4220	varargs matches remaining parameters
	C4221	nonstandard extension used: 'identifier': cannot be initialized using address of automatic variable 'variable'
	C4223	nonstandard extension used: non-lvalue array converted to pointer
	C4224	nonstandard extension used: formal parameter 'identifier' was previously defined as a type
	C4226	nonstandard extension used: 'keyword' is an obsolete keyword
	C4227	anachronism used: qualifiers on reference are ignored
	C4228	nonstandard extension used: qualifiers after comma in declarator list are ignored
	C4229	anachronism used: modifiers on data are ignored
	C4230	anachronism used: modifiers/qualifiers interspersed; qualifier ignored
	C4232	nonstandard extension used: 'identifier': address of dllimport 'dllimport' is not static, identity not guaranteed
	C4233	nonstandard extension used: 'keyword' keyword only supported in C++, not C
	C4234	nonstandard extension used: 'keyword' keyword reserved for future use
	C4235	nonstandard extension used: 'keyword' keyword not supported on this architecture
	C4237	'keyword' keyword is not yet supported, but reserved for future use
	C4238	nonstandard extension used: class rvalue used as lvalue
	C4239	nonstandard extension used: 'token': conversion from 'type1' to 'type2'
	C4240	nonstandard extension used: access to 'classname' now defined to be 'access_specifier1', previously it was defined to be 'access_specifier2'
	C4242	'identifier': conversion from 'type1' to 'type2', possible loss of data
	C4243	'conversion_type' conversion from 'type1' to 'type2' exists, but is inaccessible
	C4244	'conversion_type': conversion from 'type1' to 'type2', possible loss of data
	C4244	'conversion_type': conversion from 'type1' to 'type2', possible loss of data
	C4245	'conversion_type': conversion from 'type1' to 'type2', signed/unsigned mismatch
	C4250	'classname': inherits 'base_classname::member' via dominance
	C4251	'identifier': 'object_type1' 'identifier1' needs to have dll-interface to be used by clients of 'object_type' 'identfier2'
	C4254	'operator': conversion from 'type1:field_bits' to 'type2:field_bits', possible loss of data
	C4255	'function': no function prototype given: converting '()' to '(void)'
	C4256	'function': constructor for class with virtual bases has '...'; calls may not be compatible with older versions of Visual C++
	C4258	'variable': definition from the for loop is ignored; the definition from the enclosing scope is used
	C4263	'function': member function does not override any base class virtual member function
	C4264	'virtual_function': no override available for virtual member function from base 'classname'; function is hidden
	C4265	'classname': class has virtual functions, but destructor is not virtual\n instances of this class may not be destructed correctly
	C4266	'virtual_function': no override available for virtual member function from base 'classname'; function is hidden
	C4267	'variable': conversion from 'size_t' to 'type', possible loss of data
	C4268	'identifier': 'const' static/global data initialized with compiler generated default constructor fills the object with zeros
	C4269	'identifier': 'const' automatic data initialized with compiler generated default constructor produces unreliable results
	C4272	'function': is marked __declspec(dllimport); must specify native calling convention when importing a function.
	C4273	'function': inconsistent dll linkage
	C4274	#ident ignored; see documentation for #pragma comment(exestr, 'string')
	C4275	non dll-interface 'classkey' 'identifier1' used as base for dll-interface 'classkey' 'identifier2'
	C4276	'function': no prototype provided; assumed no parameters
	C4277	imported item 'classname::member' exists as both data member and function member; data member ignored
	C4278	'identifier': identifier in type library 'library' is already a macro; use the 'rename' qualifier
	C4279	'identifier': identifier in type library 'library' is a keyword; use the 'rename' qualifier
	C4280	'operator ->' was self recursive through type 'type'
	C4281	'operator ->' recursion occurred through type 'type1'
	C4282	then through type 'type2'
	C4283	and through type 'typeN'
	C4285	return type for 'identifier::operator ->' is recursive if applied using infix notation
	C4286	'derived_type': is caught by base class ('base_type') on line 'line_number'
	C4287	'operator': unsigned/negative constant mismatch
	C4288	nonstandard extension used: 'variable': loop control variable declared in the for-loop is used outside the for-loop scope; it conflicts with the declaration in the outer scope
	C4289	nonstandard extension used: 'variable': loop control variable declared in the for-loop is used outside the for-loop scope
	C4290	C++ exception specification ignored except to indicate a function is not __declspec(nothrow)
	C4291	'declaration': no matching operator delete found; memory will not be freed if initialization throws an exception
	C4293	'shift_operator': shift count negative or too big, undefined behavior
	C4295	'array': array is too small to include a terminating null character
	C4296	'operator': expression is always 'boolean_value'
	C4297	'function': function assumed not to throw an exception but does
	C4298	'identifier': identifier in type library 'library' is already a macro; renaming to '__identifier'
	C4299	'identifier': identifier in type library 'library' is a keyword; renaming to '__identifier'
	C4301	'derived_class::function': overriding virtual function only differs from 'base_class::function' by const/volatile qualifier
	C4302	'conversion': truncation from 'type1' to 'type2'
	C4303	C-style cast from 'type1' to 'type2' is deprecated, use static_cast, __try_cast or dynamic_cast
	C4305	'conversion': truncation from 'type1' to 'type2'
	C4306	'conversion': conversion from 'type1' to 'type2' of greater size
	C4307	'operator': integral constant overflow
	C4308	negative integral constant converted to unsigned type
	C4309	'conversion': truncation of constant value
	C4310	cast truncates constant value
	C4311	'variable': pointer truncation from 'type1' to 'type2'
	C4312	'operation': conversion from 'type1' to 'type2' of greater size
	C4313	'function': 'format_specifier' in format string conflicts with argument 'argument_number' of type 'type'
	C4314	expected pragma parameter to be '32' or '64'
	C4315	'classname': 'this' pointer for member 'member' may not be aligned 'alignment' as expected by the constructor
	C4316	'identifier': object allocated on the heap may not be aligned 'alignment'
	C4317	'printf_family' : not enough arguments passed for format string
	C4318	passing constant zero as the length to memset
	C4319	'operator': zero extending 'type1' to 'type2' of greater size
	C4321	automatically generating an IID for interface 'interface'
	C4322	automatically generating a CLSID for class 'class'
	C4323	re-using registered CLSID for class 'class'
	C4324	'structname': structure was padded due to __declspec(align())
	C4325	attributes for standard section 'section' ignored
	C4326	return type of 'function' should be 'type1' instead of 'type2'
	C4327	'assignment': indirection alignment of LHS ('alignment1') is greater than RHS ('alignment2')
	C4328	'function': indirection alignment of formal parameter parameter_number (parameter_alignment) is greater than the actual argument alignment (argument_alignment)
	C4329	__declspec(align()) is ignored on enum
	C4330	attribute 'attribute' for section 'section' ignored
	C4333	'shift_operator': right shift by too large amount, data loss
	C4334	'shift_operator': result of 32-bit shift implicitly converted to 64 bits (was 64-bit shift intended?)
	C4335	Mac file format detected: please convert the source file to either DOS or UNIX format
	C4336	import cross-referenced type library 'library1' before importing 'library2'
	C4337	cross-referenced type library 'library1' in 'library2' is being automatically imported
	C4338	#pragma directive: standard section 'section' is used
	C4339	'type': use of undefined type detected in 'WinRT|CLR' meta-data - use of this type may lead to a runtime exception
	C4340	'value': value wrapped from positive to negative value
	C4342	behavior change: 'function' called, but a member operator was called in previous versions
	C4343	#pragma optimize("g",off) overrides /Og option
	C4344	behavior change: use of explicit template arguments results in call to 'function'
	C4346	'name': dependent name is not a type
	C4348	'type': redefinition of default parameter: parameter 'parameter_number'
	C4350	behavior change: 'member1' called instead of 'member2'
	C4352	'identifier': intrinsic function already defined
	C4353	nonstandard extension used: constant 0 as function expression. Use '__noop' function intrinsic instead
	C4355 	'this': used in base member initializer list
	C4356	'member': static data member cannot be initialized via derived class
	C4357	param array argument found in formal argument list for delegate 'delegate' ignored when generating 'function'
	C4358	'operator': return type of combined delegates is not 'void'; returned value is undefined
	C4359	'type': Alignment specifier is less than actual alignment ('alignment'), and will be ignored.
	C4362	'type': alignment greater than 8 bytes is not supported by CLR
	C4364	#using for assembly 'assembly' previously seen at 'location'('line_number') without as_friend attribute; as_friend not applied
	C4365	'expression': conversion from 'type1' to 'type2', signed/unsigned mismatch
	C4366	The result of the unary 'operator' operator may be unaligned
	C4367	Conversion from 'type1' to 'type2' may cause datatype misalignment exception
	C4368	cannot define 'member' as a member of managed 'type': mixed types are not supported
	C4369	'enumerator': enumerator value 'value' cannot be represented as 'type', value is 'new_value'
	C4370	'classname': layout of class has changed from a previous version of the compiler due to better packing
	C4371	'classname': layout of class may have changed from a previous version of the compiler due to better packing of member 'member'
	C4373	'derived_class::function': virtual function overrides 'base_class::function', previous versions of the compiler did not override when parameters only differed by const/volatile qualifiers
	C4374	'function1': interface method will not be implemented by non-virtual method 'function2'
	C4375	non-public method 'method2' does not override 'method2'
	C4376	access specifier 'old_specifier:' is no longer supported: please use 'new_specifier:' instead
	C4377	native types are private by default; -d1PrivateNativeTypes is deprecated
	C4378	Must obtain function pointers to run initializers; consider System::ModuleHandle::ResolveMethodHandle
	C4379	Version 'version_number' of the common language runtime is not supported by this compiler. Using this version may cause unexpected results
	C4380	'class': A default constructor cannot be deprecated
	C4381	'function1': interface method will not be implemented by non-public method 'function2'
	C4382	throwing 'type': a type with __clrcall destructor or copy constructor can only be caught in /clr:pure module
	C4383	'instance_dereference_operator': the meaning of dereferencing a handle can change, when a user-defined 'instance_dereference_operator' operator exists; write the operator as a static function to be explicit about the operand
	C4384	#pragma 'make_public' should only be used at global scope
	C4387	'alternative': was considered
	C4388	'expression': signed/unsigned mismatch
	C4389	'operator': signed/unsigned mismatch
	C4390	';': empty controlled statement found; is this the intent?
	C4391	'function_signature': incorrect return type for intrinsic function, expected 'type'
	C4392	'function_signature': incorrect number of arguments for intrinsic function, expected 'argument_count' arguments
	C4393	'variable': const has no effect on 'literal' data member; ignored
	C4394	'function': per-appdomain symbol should not be marked with __declspec('dllexport')
	C4395	'function': member function will be invoked on a copy of the initonly data member 'member'
	C4396	'function': the inline specifier cannot be used when a friend declaration refers to a specialization of a function template
	C4397	DefaultCharSetAttribute is ignored
	C4398	'variable': per-process global object might not work correctly with multiple appdomains; consider using __declspec(appdomain)
	C4399	'symbol': per-process symbol should not be marked with __declspec('dllimport') when compiled with /clr:pure



	C4200
	C4201
	C4202
	C4203
	C4204
	C4205
	C4206
	C4207
	C4208
	C4210
	C4211
	C4212
	C4213
	C4214
	C4215
	C4216
	C4218
	C4220
	C4221
	C4223
	C4224
	C4226
	C4227
	C4228
	C4229
	C4230
	C4232
	C4233
	C4234
	C4235
	C4237
	C4238
	C4239
	C4240
	C4242
	C4243
	C4244
	C4244
	C4245
	C4250
	C4251
	C4254
	C4255
	C4256
	C4258
	C4263
	C4264
	C4265
	C4266
	C4267
	C4268
	C4269
	C4272
	C4273
	C4274
	C4275
	C4276
	C4277
	C4278
	C4279
	C4280
	C4281
	C4282
	C4283
	C4285
	C4286
	C4287
	C4288
	C4289
	C4290
	C4291
	C4293
	C4295
	C4296
	C4297
	C4298
	C4299
	C4301
	C4302
	C4303
	C4305
	C4306
	C4307
	C4308
	C4309
	C4310
	C4311
	C4312
	C4313
	C4314
	C4315
	C4316
	C4317
	C4318
	C4319
	C4321
	C4322
	C4323
	C4324
	C4325
	C4326
	C4327
	C4328
	C4329
	C4330
	C4333
	C4334
	C4335
	C4336
	C4337
	C4338
	C4339
	C4340
	C4342
	C4343
	C4344
	C4346
	C4348
	C4350
	C4352
	C4353
	C4355
	C4356
	C4357
	C4358
	C4359
	C4362
	C4364
	C4365
	C4366
	C4367
	C4368
	C4369
	C4370
	C4371
	C4373
	C4374
	C4375
	C4376
	C4377
	C4378
	C4379
	C4380
	C4381
	C4382
	C4383
	C4384
	C4387
	C4388
	C4389
	C4390
	C4391
	C4392
	C4393
	C4394
	C4395
	C4396
	C4397
	C4398
	C4399



	4200
	4201
	4202
	4203
	4204
	4205
	4206
	4207
	4208
	4210
	4211
	4212
	4213
	4214
	4215
	4216
	4218
	4220
	4221
	4223
	4224
	4226
	4227
	4228
	4229
	4230
	4232
	4233
	4234
	4235
	4237
	4238
	4239
	4240
	4242
	4243
	4244
	4244
	4245
	4250
	4251
	4254
	4255
	4256
	4258
	4263
	4264
	4265
	4266
	4267
	4268
	4269
	4272
	4273
	4274
	4275
	4276
	4277
	4278
	4279
	4280
	4281
	4282
	4283
	4285
	4286
	4287
	4288
	4289
	4290
	4291
	4293
	4295
	4296
	4297
	4298
	4299
	4301
	4302
	4303
	4305
	4306
	4307
	4308
	4309
	4310
	4311
	4312
	4313
	4314
	4315
	4316
	4317
	4318
	4319
	4321
	4322
	4323
	4324
	4325
	4326
	4327
	4328
	4329
	4330
	4333
	4334
	4335
	4336
	4337
	4338
	4339
	4340
	4342
	4343
	4344
	4346
	4348
	4350
	4352
	4353
	4355
	4356
	4357
	4358
	4359
	4362
	4364
	4365
	4366
	4367
	4368
	4369
	4370
	4371
	4373
	4374
	4375
	4376
	4377
	4378
	4379
	4380
	4381
	4382
	4383
	4384
	4387
	4388
	4389
	4390
	4391
	4392
	4393
	4394
	4395
	4396
	4397
	4398
	4399